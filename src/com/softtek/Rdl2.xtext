grammar com.softtek.Rdl2 with org.eclipse.xtext.common.Terminals

generate rdl2 "http://www.softtek.com/Rdl2"

Model:
  module = Module | (actors+=Actor)* | system=System
;

ModuleRef:
	'module' module_ref=[Module|QualifiedName]
;
 
System :
 'system' name=ID '{' 
 	'title' ':' title=STRING
 	('description' ':' description=STRING)?
 	('logo' ':' logo=STRING)?
 	(modules_ref += ModuleRef)+
 	 
 '}'
;

Module:
 'module' name = QualifiedName '{'
   'name' ':' description = STRING
   (elements += AbstractElement)*
 '}'
;

QualifiedName:
  ID ('.' ID)*
;

QualifiedNameWithWildcard:
  QualifiedName '.*'?
;

AbstractElement:
	( Enum | Entity | PageContainer | Task | CommandQuery )
;
	
Enum:
	'enum' name=ID '{'
		(enum_literals += EnumLiteral)+
	'}'
;

EnumLiteral:
	key=ID ':' value=STRING
;

Entity:
	'entity' name=ID '{'
	    (actions = Actions)?
	    (glossary = Glossary)?
	    (db_map = DBMapEntity)?
		(entity_fields += EntityField)+
	    (entity_methods += MethodDeclaration)*
	'}'
;

MethodDeclaration:
 	'def' name=ID '{'
 		( def_statements += Statement )+
	'}'
;

Statement:
	StatementReturn
;

StatementReturn:
	'return' entityfield=[EntityField|QualifiedName]
;

EntityField:
	EntityReferenceField |
	EntityTextField      |
	EntityLongTextField  |
	EntityDateField      |
	EntityImageField     |
	EntityFileField      |
	EntityEmailField     |
	EntityDecimalField   |
	EntityIntegerField   |
	EntityCurrencyField
;

EntityTextConstraintDef:
	'constraints' '(' constraints += EntityTextConstraint (',' constraints += EntityTextConstraint)* ')'
;

EntityTextConstraint:
	ConstraintRequired |
	ConstraintUnique   |
	ConstraintMaxLength|
	ConstraintMinLength
;

EntityTextField:
	'field' name=ID ':' 'Text'
	  ('{'
	      (attrs += EntityTextFieldAttr)+
	   '}')?
;

EntityTextFieldAttr:
	//numberofvalues   = NumberOfValues         |
	glossary         = Glossary               |
	widget           = WidgetText             |
	constraint       = EntityTextConstraintDef|
	db_map           = DBMapField             |
	data_domain      = DataDomain             |
	business_rule    = BusinessRule
;


EntityLongTextField:
	'field' name=ID ':' 'LongText'
	('{'
	  (attrs += EntityLongTextFieldAttr)+
	'}')?
;

EntityLongTextFieldAttr:
	glossary         = Glossary                |
	widget           = Widget                  |
	constraint       = EntityTextConstraintDef |
	db_map           = DBMapField              |
	data_domain      = DataDomain              |
	business_rule    = BusinessRule
;

EntityDateField:
	'field' name=ID ':' 'Date'
	('{'
	  (attrs += EntityDateFieldAttr)+
	'}')?
;

EntityDateFieldAttr:
   'default' ':' default=DATE                  |
	glossary         = Glossary                |
	widget           = WidgetDate              |
	constraint       = EntityTextConstraintDef |
	db_map           = DBMapField              |
	data_domain      = DataDomain              |
	business_rule    = BusinessRule
;

EntityReferenceField:
	'reference' name=ID ':' superType=[EnumEntity|QualifiedName] '[' lowerBound=INT '..' upperBound=CardinalityUpperBound ']' ('opposite-of' opposite=[EntityReferenceField|QualifiedName])?
    ('{'
   	  (attrs += EntityReferenceFieldAttr)+
    '}')?
;  

CardinalityUpperBound:
	INT | '*'
;

EntityReferenceFieldAttr:
	glossary         = Glossary                |
	widget           = WidgetEnum              |
	constraint       = EntityTextConstraintDef |
	db_map           = DBMapField              |
	data_domain      = DataDomain              |
	business_rule    = BusinessRule
;

EnumEntity:
	Enum | Entity
;
EntityImageField:
	'field' name=ID ':' 'Image'
	('{'
	  (attrs += EntityAttr)+
	'}')?
;

EntityFileField:
	'field' name=ID ':' 'File'
	('{'
	  (attrs += EntityAttr)+
	'}')?
;

EntityEmailField:
	'field' name=ID ':' 'Email'
	('{'
	  (attrs += EntityAttr)+
	'}')?
;

EntityDecimalField:
	'field' name=ID ':' 'Decimal'
	('{'
	  (attrs += EntityAttr)+
	'}')?
;

EntityIntegerField:
	'field' name=ID ':' 'Integer'
	('{'
	 (attrs += EntityAttr)+
	'}')?
;

EntityCurrencyField:
	'field' name=ID ':' 'Currency'
	('{'
	  (attrs += EntityAttr)+
	'}')?
;

EntityAttr:
	glossary         = Glossary                |
	widget           = Widget                  |
	constraint       = EntityTextConstraintDef |
	db_map           = DBMapField              |
	data_domain      = DataDomain              |
	business_rule    = BusinessRule
;

ConstraintRequired:
	'required' ':' value=('true' | 'false')
;

ConstraintUnique:
	'unique' ':' value=('true' | 'false')
;

ConstraintMaxLength:
	'max_length' ':' value=INT
;

ConstraintMinLength:
	'min_length' ':' value=INT
;


//Glossary
Glossary :
	'glossary' '('
	     glossary_name        = GlossaryName
	     ','
	     glossary_description = GlossaryDescription
	     //attrs += GlosaryAttr (',' attrs += GlosaryAttr)* 
	 ')'
;

GlossaryName:
	'name' ':' label= STRING
;

GlossaryDescription:
	'description' ':' label= STRING
;

WidgetLabel:
	'label' ':' label= STRING
;

WidgetHelp:
	'help'  ':' help = STRING 
;

WidgetExposedFilter:
	'exposed_filter'  ':' exposed_filter = ('true' | 'false') 
;

WidgetType:
	'type'  ':' type = ('Option'| 'Check' | 'Autocomplete')
;

WidgetTypeSelect:
	'type'  ':' type = 'SelectList' 
;


WidgetSortBy:
	'sort_by'  ':' sortby = ID 
;

WidgetStartYear :
	{WidgetStartYear} 'start_year_from_now' ':' start= '-'? '+'? INT
;

WidgetEndYear :
	{WidgetEndYear} 'end_year_from_now' ':' end='-'? '+'? INT
;

Widget :
	widget='widget' '(' attrs += WidgetAttr (',' attrs += WidgetAttr)* ')'
;

WidgetEnum :
	widget='widget' '(' attrs += WidgetAttrEnum (',' attrs += WidgetAttrEnum)* ')'
;

WidgetDate :
	widget='widget' '(' attrs += WidgetAttrDate (',' attrs += WidgetAttrDate)* ')'
;

WidgetText :
	widget='widget' '(' attrs += WidgetAttrText (',' attrs += WidgetAttrText)* ')'
;


WidgetAttr:
	WidgetLabel |
	WidgetHelp  |
	WidgetExposedFilter|
	WidgetDisplayResult
;

WidgetAttrEnum:
	WidgetAttrEnumType |
	WidgetAttrEnumTypeSelect|
	WidgetDisplayResult
;

WidgetAttrEnumType:
	WidgetLabel |
	WidgetHelp  |
	WidgetExposedFilter |
	WidgetType 
;

WidgetAttrEnumTypeSelect:
	widget_select = WidgetTypeSelect 
	(',' sortby = WidgetSortBy)?
;

WidgetAttrDate:
	WidgetLabel |
	WidgetHelp  |
	WidgetExposedFilter |
	WidgetStartYear |
	WidgetEndYear |
	WidgetDisplayResult
;

WidgetAttrText:
	WidgetLabel |
	WidgetHelp  |
	WidgetExposedFilter |
	WidgetSize |
	WidgetDisplayResult
;


WidgetSize:
	'size'  ':' type = WidgetSizeType 
;

WidgetSizeType:
	'XS' |'SM'  |'MD' |'LG' | 'XL'
;

WidgetDisplayResult:
   'display_result' ':'  display_result= ('true'| 'false')
;
//Types
BOOLEAN :
	'true' | 'false'
;

DATE:
	{DATE} (date=DATETIME)| now='Now' 
;

MONTH : 'Jan'|'Feb'|'Mar'|'Apr'|'May'|'Jun'|'Jul'|'Aug'|'Sep'|'Oct'|'Nov'|'Dec';



ActionSearch:
   'search' ':' value = ('Simple' | 'Complex' | 'None' )
;

ActionAdd:
   'add'  ':'   value = ('true' | 'false')
;

ActionEdit:
   'edit' ':'   value = ('true' | 'false') 
;

ActionDelete:
   'delete' ':' value = ('true' | 'false')
;
  
Action:
	ActionSearch |
	ActionAdd    |
	ActionEdit   |
	ActionDelete 
;

Actions:
 'scaffold' '(' action += Action (',' action += Action)* ')'
;

terminal DATETIME :
	 ('0'..'9')('0'..'9')('0'..'9')('0'..'9')
	 ('-'|'/')
	 ('0'..'9')('0'..'9')
	 ('-'|'/')
	 ('0'..'9')('0'..'9')
	 (' '
	  ('0'..'9')('0'..'9')
	  ':'
	  ('0'..'9')('0'..'9')
	  ':'
	  ('0'..'9')('0'..'9'))?
;

DBMapEntity: 
	 'db_map' '('
	 'table'  ':' table=STRING (')'|','
	 dbmap_attrs += DBMapAttr (',' dbmap_attrs += DBMapAttr)* ')')
;

DBMapAttr:
	DBMapAttrIdentity | DBMapAttrAutoId
;
DBMapAttrIdentity:
	'identity' ':' identity= STRING	
;

DBMapAttrAutoId:
	'auto_id' ':' autoid= ('true'|'false')	
;

DBMapField: 
	'db_map' '(' 'field'  ':' table=STRING 
	 (')' | ',' 'pk' ':' pk=('true'|'false') ')')
;

DataDomain:
	'data' '(' 'domain' ':' domain=STRING ')'
;

BusinessRule:
    'business_rule' '(' 'code' ':' code=STRING ',' 'description' ':' description=STRING ')'
;

//Actors
//Actors:{Actors}
//	(actors+=Actor)*
//;


Actor:
	'actor' name=ID '{'
		'name' ':' (actor_name=STRING)
	'}'
;

//PageContainers

PageContainer:
	'screen'  (name=ID) (':' screen_type=('Wizard'|'Modal'|'Modeless'))? '{'
		('home' ':' home=('true'|'false'))?
		('landmark' ':' landmark=('true'|'false'))?
		'title' ':' (page_title=STRING)
		(components+=UIComponent)*
		(links += UILinkFlow)*
	'}'
;


UIComponent:
	FormComponent   |
	InlineFormComponent |
	ListComponent   |
	DetailComponent |
	MessageComponent|
	RowComponent
;

FormComponent:
	'form' ('<' (entity=[Entity|QualifiedName]) '>')? name=ID '{'
		('title' ':' (form_title=STRING))?
		(form_elements += UIElement)*
		(links += UILinkCommandQueryFlow)*
	'}'
;

/* TODO: En Inlineforms no se debe permitir rows, cols o panels */
InlineFormComponent:
	'inlineform' ('<' (entity=[Entity|QualifiedName]) '>')? name=ID '{'
		('title' ':' (form_title=STRING))?
		(form_elements += UIElement)*
		(links += UILinkCommandQueryFlow)*
	'}'
;

ListComponent:
	'list' '<' (entity=[Entity|QualifiedName]) '>' name=ID '{'
		('title' ':' (list_title=STRING))?
		(list_elements += UIElement)*
		(links += UILinkCommandQueryFlow)*
	'}'
;

DetailComponent:
	'details' '<' (entity=[Entity|QualifiedName]) '>' name=ID '{'
		('title' ':' (list_title=STRING))?
		(list_elements += UIElement)*
		(links += UILinkCommandQueryFlow)*
	'}'
;

MessageComponent:
	'message' name=ID
	('{' 'text' ':' msgtext=STRING '}')?
;

RowComponent: 
	'row' '{'
	    (columns += ColumnComponent)+
	'}'
;

ColumnComponent:
	'col' '(' sizes += SizeOption (',' sizes += SizeOption)* ')' '{'
		(elements += UIComponent)+
	'}'
;

UIElement:
	UIField | UIDisplay | UIFormContainer
;

UIFormContainer:
	UIFormPanel | UIFormRow 
;

UIFormPanel:
	'panel' name=ID '{'
	    ('title' ':' title=STRING)?
		(elements += UIElement)+
	'}'
;

UIFormRow: {UIFormRow}
	'row' '{'
	    (columns += UIFormColumn)+
	'}'
;

UIFormColumn:{UIFormColumn}
	'col' '(' sizes += SizeOption (',' sizes += SizeOption)* ')' '{'
		(elements += UIElement)+
	'}'
;

SizeOption:
	XS|SM|MD|LG|XL
;

XS:
	sizeop=('xs-1'|'xs-2'|'xs-3'|'xs-4'|'xs-5'|'xs-6'|'xs-7'|'xs-8'|'xs-9'|'xs-10'|'xs-11'|'xs-12')
;

SM:
	sizeop=('sm-1'|'sm-2'|'sm-3'|'sm-4'|'sm-5'|'sm-6'|'sm-7'|'sm-8'|'sm-9'|'sm-10'|'sm-11'|'sm-12')
;

MD:
	sizeop=('md-1'|'md-2'|'md-3'|'md-4'|'md-5'|'md-6'|'md-7'|'md-8'|'md-9'|'md-10'|'md-11'|'md-12')
;

LG:
	sizeop=('lg-1'|'lg-2'|'lg-3'|'lg-4'|'lg-5'|'lg-6'|'lg-7'|'lg-8'|'lg-9'|'lg-10'|'lg-11'|'lg-12')
;

XL:
	sizeop=('xl-1'|'xl-2'|'xl-3'|'xl-4'|'xl-5'|'xl-6'|'xl-7'|'xl-8'|'xl-9'|'xl-10'|'xl-11'|'xl-12')
;

UIDisplay:
	'display' ui_field=[EntityField|QualifiedName] ('{' mutable='mutable' '}')?
;

UIField:
	UITextField
  | UILongTextField
  | UIDateField
  | UIImageField
  | UIFileField
  | UIEmailField 
  | UIDecimalField 
  | UIIntegerField 
  | UICurrencyField
;

UITextField:
	'field' name=ID ':' 'Text' ('{' immutable='immutable' '}')?
;

UILongTextField:
	'field' name=ID ':' 'LongText' ('{' immutable='immutable' '}')?
;

UIDateField:
	'field' name=ID ':' 'Date' ('{' immutable='immutable' '}')?
;
UIImageField:
	'field' name=ID ':' 'Image'	 ('{' immutable='immutable' '}')?
;

UIFileField:
	'field' name=ID ':' 'File'	 ('{' immutable='immutable' '}')?
;

UIEmailField:
	'field' name=ID ':' 'Email'	 ('{' immutable='immutable' '}')?
;

UIDecimalField:
	'field' name=ID ':' 'Decimal' ('{' immutable='immutable' '}')?
;

UIIntegerField:
	'field' name=ID ':' 'Integer' ('{' immutable='immutable' '}')?
;

UICurrencyField:
	'field' name=ID ':' 'Currency' ('{' immutable='immutable' '}')?
;


UILinkCommandQueryFlow:
	UICommandFlow |
	UIQueryFlow	 |
	UILinkFlow
;

UIQueryFlow:
	'query' name=ID '->' query_ref=[QueryElement|QualifiedName]
		'.success' ':' success_flow=[UIComponent|QualifiedName]
		'.failure' ':' failure_flow=[UIComponent|QualifiedName]
	'{'
		'widget' '(' ('label' ':' (link_label=STRING))? (',' 'type' ':' (type=('PrimaryButton'|'Button'|'Link')))? (',' 'state' ':' ('Info'|'Success'|'Danger'))? (',' 'icon' ':' icon=STRING)?  ')'
	'}'
;

UICommandFlow:
	'command' name=ID '->' command_ref=[CommandElement|QualifiedName]
		'.success' ':' success_flow=[UIComponent|QualifiedName]
		'.failure' ':' failure_flow=[UIComponent|QualifiedName]
	'{'
		'widget' '(' ('label' ':' (link_label=STRING))? (',' 'type' ':' (type=('PrimaryButton'|'Button'|'Link')))? (',' 'state' ':' ('Info'|'Success'|'Danger'))? (',' 'icon' ':' icon=STRING)?  ')'
	'}'
;

UILinkFlow:
	'flow' name=ID '->' (link_to=[PageContainer|QualifiedName])
	('{'
		'widget' '(' ('label' ':' (link_label=STRING))? (',' 'type' ':' (type=('PrimaryButton'|'Button'|'Link')))? (',' 'state' ':' ('Info'|'Success'|'Danger'))? (',' 'icon' ':' icon=STRING)?  ')'
	'}')?
;


//Tasks

Task:
	'task' name=ID ':' 'User' '{'
		'id' ':' uc_id=ID
		'name' ':' uc_name=STRING
		'goal' ':' uc_goal=STRING
		'trigger' ':' trigger=UCTrigger
		(steps+=TaskStep)*
	'}'
;

UCTrigger:
	actor=[Actor] 'chooses' page=[PageContainer]
;

TaskStep:
	SystemStep |
	ActorStep
;

SystemStep:
	SystemShowsStep |
	SystemValidatesFormStep |
	SystemFillsListStep |
	SystemCreatesEntityStep |
	SystemUpdatesEntityStep |
	SystemDeletesEntityStep |
	SystemInvokesUCStep
;

ActorStep:
	ActorEntersStep |
	ActorChoosesStep |
	ActorSelectsStep
;

SystemShowsStep:
	'System' 'shows' page=[PageContainer]
;

SystemValidatesFormStep:
	'System' 'validates' form=[FormComponent|QualifiedName]
;

SystemFillsListStep:
	'System' 'fills' list=[ListComponent|QualifiedName]
;

SystemCreatesEntityStep:
	'System' 'creates' entity=[Entity|QualifiedName]
;

SystemUpdatesEntityStep:
	'System' 'updates' entity=[Entity|QualifiedName]
;

SystemDeletesEntityStep:
	'System' 'deletes' entity=[Entity|QualifiedName]
;

SystemInvokesUCStep:
	'System' 'invokes' usecase=[Task]
;

ActorEntersStep:
	actor=[Actor] 'enters' form=[FormComponent|QualifiedName]
;

ActorChoosesStep:
	actor=[Actor] 'chooses' command=[UILinkCommandQueryFlow|QualifiedName]
;

ActorSelectsStep:
	actor=[Actor] 'selects' list=[UILinkCommandQueryFlow|QualifiedName]
;


CommandQuery:
	CommandElement |
	QueryElement
;

CommandElement:
	'command'  name=ID '{'
	    'name' ':' servicename = STRING
		('description' ':' description=STRING)?
	'}'
;

QueryElement:
	'query'  name=ID '{'
	    'name' ':' servicename = STRING
		('description' ':' description=STRING)?
	'}'
;