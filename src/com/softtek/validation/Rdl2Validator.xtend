/*
 * generated by Xtext 2.12.0
 */
package com.softtek.validation
import java.util.regex.Pattern
import java.util.List
import java.util.ArrayList
import com.softtek.rdl2.StatementReturn
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.softtek.rdl2.MethodDeclaration
import com.softtek.rdl2.EnumLiteral
import com.softtek.rdl2.EntityReferenceField
import com.softtek.rdl2.AbstractElement
import com.softtek.rdl2.EntityField
import com.softtek.rdl2.Entity
import com.softtek.rdl2.Module
import com.softtek.rdl2.Enum
import org.eclipse.xtext.validation.Check
import com.softtek.rdl2.PageContainer
import com.softtek.rdl2.FormComponent
import com.softtek.rdl2.ListComponent
import com.softtek.rdl2.DetailComponent
import com.softtek.rdl2.MessageComponent
import com.softtek.rdl2.UICommandFlow
import com.softtek.rdl2.UIQueryFlow
import com.softtek.rdl2.UILinkFlow

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class Rdl2Validator extends AbstractRdl2Validator {
	
@Inject extension IQualifiedNameProvider
    List<String> entitydomain = new ArrayList<String>();
    List<String> enumdomain   = new ArrayList<String>();
    List<String> screendomain = new ArrayList<String>();
    List<String> fieldsdomain = new ArrayList<String>();
    List<String> literalkeysdomain = new ArrayList<String>();
    List<String> literalvaluesdomain = new ArrayList<String>();
    List<String> entityfields = new ArrayList<String>();
     
    int entityOccurrences =0;
    int screenOccurrences =0;
    int enumOccurrences   =0;
    
   // Entities
   
   @Check
   def void checkEntityStatementReturnSameEntityField(StatementReturn statementr) {
    	entityfields= new ArrayList<String>();
    	var entityfield= statementr.eCrossReferences.head as EntityField
    	 
    	var entity = statementr.eContainer.eContainer as Entity
    	 for (ef: entity.entity_fields) {
    	 	entityfields.add(ef.fullyQualifiedName.toString)
    	 }
    	 
    	 if (!entityfields.contains(entityfield.fullyQualifiedName.toString)) { 
    	 	 error("Choose one of the following fields: \n" + entityfields.join('\n'),null)
    	 }
   }
     
   @Check
   def void checkEntityDefToString(Entity entity){
    var found=false;
    for ( c:entity.eContents()) {
    	if (c.eClass().getName().contains("MethodDeclaration")) {
    		var m = c as MethodDeclaration
    		if (m.name=="toString")
    		 found=true;
    	}	
    }
     if (!found)
       error("Declaration def toString is missing.",null);
   }
   
   @Check
   def void checkEntityFields(Entity entity){
   	fieldsdomain = new ArrayList<String>();
    for ( c:entity.eContents()) {
    	//warning(c.toString,null)
    	if (c.eClass().getName().contains("Field")) {
    		var ef= c as EntityField
    		fieldsdomain.add(ef.name)
    	} 
    }
   }
   
   @Check
   def void checkEntityDuplicated(Entity entity){ 
   	entityOccurrences=0
   	 for (e:entitydomain){
   		if (entity.name==e) 
   		  entityOccurrences=entityOccurrences+1
   	 }
   	
   	 if (entityOccurrences>1) {
   		error("Duplicated entity "+entity.name,null)
   		return
     } 
   }
   
   @Check
   def void checkEntityCapital(Entity entity){
     if (!Character.isUpperCase(entity.name.charAt(0))) {
      error("Entity identifier must start with an uppercase letter.",null);
     } 
   }
   
   
   // Enums
   
   @Check
   def void checkEnumCapital(Enum enump){
     if (!Character.isUpperCase(enump.name.charAt(0))) {
      error("Enum identifier must start with an uppercase letter.",null);
     }
   }
   
   @Check
   def void checkEnumDuplicated(Enum enump){
     enumOccurrences=0
   	 for (e:enumdomain){
   		if (enump.name==e) 
   		  enumOccurrences=enumOccurrences+1
   	 }
   	 if (enumOccurrences>1) {
   		error("Duplicated enum "+enump.name,null)
   		return
   	 } 
   }
   
   @Check
   def void checkEnumLiteralCapital(EnumLiteral literal){
     if (!Character.isUpperCase(literal.key.charAt(0))) {
       error("Enum literal key must start with an uppercase letter.",null);
     }
   }
   
   @Check
   def void checkEnumLiteralDuplicated(EnumLiteral literal){
      literalkeysdomain = new ArrayList<String>();
   	  literalvaluesdomain = new ArrayList<String>();
      var enum = literal.eContainer as Enum
      var foundk=false;
      var foundv=false;
      var currentkey=""
      var currentvalue=""
      for (c:enum.eContents()) {
    	if (c.eClass().getName().contains("Literal")) {
    		var ef= c as EnumLiteral
    		if (literalkeysdomain.contains(ef.key)) {
    		   foundk=true;
    		   currentkey=ef.key
    		}
    		else
    		   literalkeysdomain.add(ef.key);
    		
    		if (literalvaluesdomain.contains(ef.value.toLowerCase)){
    		   foundv=true;
    		   currentvalue=ef.value
    		}
    		else
    		   literalvaluesdomain.add(ef.value.toLowerCase);
    	} 
      }
      
      if (foundk && literal.key==currentkey)
         error("The literal key " + literal.key + " is already declared in the enum." ,null);
      if (foundv && literal.value.toLowerCase==currentvalue.toLowerCase)
         error("The literal value \"" + literal.value + "\" is already declared in the enum." ,null);
   }
   
   // Screens
   
   @Check
   def void checkScreenCapital(PageContainer screen){
     if (!Character.isUpperCase(screen.name.charAt(0))) {
      error("Screen identifier must start with an uppercase letter.",null);
     }
   }
   
   @Check
   def void checkScreenDuplicated(PageContainer screen){
     screenOccurrences=0
   	 for (e:screendomain){
   	 	 if (screen.name==e) 
   	       screenOccurrences=screenOccurrences+1
   	 }
   	 if (screenOccurrences>1) {
   		error("Duplicated screen "+screen.name,null)
   		return
   	 } 
   }
   
   // Entity Fields
   
   @Check
   def void checkFieldDuplicated(EntityField field){
     fieldsdomain = new ArrayList<String>();
     var entity = field.eContainer as Entity
     var found=false;
     var currentfield=""
     for (c:entity.eContents()) {
       if (c.eClass().getName().contains("Field")) {
     	  var ef= c as EntityField
    		if (fieldsdomain.contains(ef.name)){
    		  found=true;
    		  currentfield=ef.name
    		}
    		else
    		  fieldsdomain.add(ef.name);
       } 
     }
     if (found && field.name==currentfield)
       error("The field " + field.name + " is already declared in the entity." ,null);
   }
   
   @Check
   def void checkFieldScaffoldReference(EntityField field){
      if (field.eClass.name.trim.equals("EntityReferenceField")) {
   	 	 var f = field as EntityReferenceField
   	 	 /*  
   	 	 if (f.eCrossReferences.get(0).eClass.name.trim.equals("Entity")){
   	 		 var e = f.eCrossReferences.get(0) as Entity
   	 		
   	 		 var foundScafold=false;
             for ( c:e.eContents()) 
    	      if (c.eClass().getName().trim.equals("Actions")) 
    		     foundScafold=true
    
             if (!foundScafold) 
               error("The scaffold section is missing at entity: " +e.name,null)
   	 	 }
   	 	 */
   	 	 if (f.upperBound.trim.equals("*") && f.opposite.upperBound.trim.equals("*")){
   	 	    error("Relations Many to Many [1..*] are not allowed in opposite field: "+ f.opposite.name,null)
   	 	    error("Change [1..*] to [1..1] in reference field "+ f.opposite.name,null)
   	     }
   	   }
   }
   
   @Check
   def void checkFieldCapital(EntityField field){
     if (!Character.isUpperCase(field.name.charAt(0))) {
       error("Field identifier must start with an uppercase letter.",null);
     }
   }
   
   // Module 
   
   @Check
   def void checkModuleCapital(Module module){
     if (module===null) return
   	 var qualifieds= module.name.split(Pattern.quote("."))
   	 for(qname:qualifieds){
       if (!Character.isUpperCase(qname.charAt(0))) {
          error("The '" + qname +"' identifier must start with an uppercase letter." ,null);
       }
     }
   }
   
   @Check
   def void checkDuplicatedAbstractElement(AbstractElement element){
     var elements = (element.eContainer as Module).elements
     ///warning(elements.toString,null)
     entitydomain  = new ArrayList<String>();
     screendomain  = new ArrayList<String>();
     enumdomain    = new ArrayList<String>();
     for ( e:elements){
     	 if (e.eClass.name==="Entity"){
           var f =e as Entity
           entitydomain.add(f.name)
         }
     
         if (e.eClass.name==="Enum"){
           var f =e as Enum
           enumdomain.add(f.name)
         }
         
         if (e.eClass.name==="PageContainer"){
           var p =e as PageContainer
           screendomain.add(p.name)
         }
      }
   }
   
   // Form Components
   
   @Check
   def void checkFormCapital(FormComponent form){
     if (!Character.isUpperCase(form.name.charAt(0))) {
       error("Form identifier must start with an uppercase letter.",null);
     }
   }
   
   // List Components
   
   @Check
   def void checkListCapital(ListComponent list){
     if (!Character.isUpperCase(list.name.charAt(0))) {
       error("List identifier must start with an uppercase letter.",null);
     }
   }
   
   // Detail Components
   
   @Check
   def void checkDetailCapital(DetailComponent detail){
     if (!Character.isUpperCase(detail.name.charAt(0))) {
       error("Detail identifier must start with an uppercase letter.",null);
     }
   }
   
   // Message Components
   
   @Check
   def void checkMessageCapital(MessageComponent message){
     if (!Character.isUpperCase(message.name.charAt(0))) {
       error("Message identifier must start with an uppercase letter.",null);
     }
   }
   
   // Flow Components
   
   @Check
   def void checkCommandFlowCapital(UICommandFlow command){
     if (!Character.isUpperCase(command.name.charAt(0))) {
       error("Command Flow identifier must start with an uppercase letter.",null);
     }
   }
   
   @Check
   def void checkQueryFlowCapital(UIQueryFlow command){
     if (!Character.isUpperCase(command.name.charAt(0))) {
       error("Query Flow identifier must start with an uppercase letter.",null);
     }
   }
   
   @Check
   def void checkLinkFlowCapital(UILinkFlow command){
     if (!Character.isUpperCase(command.name.charAt(0))) {
       error("Link Flow identifier must start with an uppercase letter.",null);
     }
   }
   

}
